{"version":3,"sources":["SmartSwitch.js","App.js","serviceWorker.js","index.js"],"names":["SmartSwitch","_this$props","this","props","name","id","value","onValueChange","react_default","a","createElement","View","key","style","display","flexDirection","alignItems","Switch","marginRight","Boolean","Text","PureComponent","config","require","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateLight","socket","emit","socketIOClient","state","db","_this2","on","data","setState","_this3","ScrollView","contentContainerStyle","paddingVertical","map","room","roomId","borderBottomColor","borderBottomWidth","paddingHorizontal","fontSize","fontWeight","marginBottom","roomName","devices","device","deviceId","src_SmartSwitch","status","deviceName","val","flex","justifyContent","textAlign","ActivityIndicator","size","Component","window","location","hostname","match","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2iCA4BeA,mLAxBJ,IAAAC,EACoCC,KAAKC,MAAxCC,EADDH,EACCG,KAAMC,EADPJ,EACOI,GAAIC,EADXL,EACWK,MAAOC,EADlBN,EACkBM,cACzB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,IAAKP,EACLQ,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,WAAY,WAGdR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEJ,MAAO,CAAEK,YAAa,IACtBZ,MAAOa,QAAQb,GACfC,cAAeA,IAEjBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACU,EAAA,EAAD,KAAOhB,YAlBSiB,kCCEpBC,EAASC,EAAQ,KA8DRC,cA3Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,QAoBF6B,YAAc,SAAC1B,EAAIC,GACjBmB,EAAKO,OAAOC,KAAK,eAAgB,CAAE5B,KAAIC,WApBvCmB,EAAKO,OAASE,IAAe,KAC7BT,EAAKU,MAAQ,CACXb,OAAQ,GACRc,GAAI,MALMX,mFAQM,IAAAY,EAAAnC,KAElBA,KAAK8B,OAAOM,GAAG,UAAW,SAACC,GAAS,IAC1BH,EAAOG,EAAPH,GACRC,EAAKG,SAAS,CAAEJ,SAGlBlC,KAAK8B,OAAOM,GAAG,YAAa,SAACC,GAAS,IAC5BH,EAAOG,EAAPH,GACRC,EAAKG,SAAS,CAAEJ,0CAQX,IAAAK,EAAAvC,KACCkC,EAAOlC,KAAKiC,MAAZC,GACR,OAAKA,EASH5B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAYC,sBAAuB,CAAEC,gBAAiB,KACnDtB,EAAOuB,IAAI,SAAAC,GAAI,OACdtC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,IAAKkC,EAAKC,OAAQlC,MAAO,CAAE+B,gBAAiB,GAAII,kBAAmB,OAAQC,kBAAmB,EAAGC,kBAAmB,KACxH1C,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMP,MAAO,CAAEsC,SAAU,GAAIC,WAAY,MAAOC,aAAc,IAC3DP,EAAKQ,UAEPR,EAAKS,QAAQV,IAAI,SAAAW,GAAM,OACtBhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,IAAK4C,EAAOC,SAAU5C,MAAO,CAAE+B,gBAAiB,IACpDpC,EAAAC,EAAAC,cAACgD,EAAD,CACEpD,MAAO8B,EAAGoB,EAAOC,UAAUE,OAC3BvD,KAAMoD,EAAOI,WACbvD,GAAImD,EAAOC,SACXlD,cAAe,SAACsD,GAAD,OAASpB,EAAKV,YAAYyB,EAAOC,SAAUI,aAnBpErD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAME,MAAO,CAAEiD,KAAM,EAAGC,eAAgB,SAAUhD,cAAe,WAC/DP,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMP,MAAO,CAAEmD,UAAW,SAAUX,aAAc,KAAlD,2BACA7C,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAmBC,KAAK,kBAhChBC,aCKEhD,QACW,cAA7BiD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAAYC,kBAAkB,MAAO,kBAAMjD,IAC3CgD,IAAYE,eAAe,MAAO,CAAEC,QAASC,SAASC,eAAe,UD4H/D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5ccb0dc.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Switch, View, Text } from 'react-native';\n\nclass SmartSwitch extends PureComponent {\n  render() {\n    const { name, id, value, onValueChange } = this.props;\n    return (\n      <View\n        key={id}\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n        }}\n      >\n        <Switch\n          style={{ marginRight: 10 }}\n          value={Boolean(value)}\n          onValueChange={onValueChange}\n        />\n        <View>\n          <Text>{name}</Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default SmartSwitch;\n","import React, { Component } from 'react';\nimport { ActivityIndicator, View, Text, ScrollView } from 'react-native';\nimport SmartSwitch from './SmartSwitch';\nimport socketIOClient from \"socket.io-client\";\n\nconst config = require('./config.json');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.socket = socketIOClient('/');\n    this.state = {\n      config: {},\n      db: null\n    }\n  }\n  componentDidMount() {\n    // fetch config\n    this.socket.on('load_db', (data) => {\n      const { db } = data;\n      this.setState({ db });\n    });\n\n    this.socket.on('update_db', (data) => {\n      const { db } = data;\n      this.setState({ db });\n    })\n  }\n\n  updateLight = (id, value) => {\n    this.socket.emit('update_light', { id, value });\n  }\n\n  render() {\n    const { db } = this.state;\n    if (!db) {\n      return (\n        <View style={{ flex: 1, justifyContent: 'center', flexDirection: 'column'}}>\n          <Text style={{ textAlign: 'center', marginBottom: 20 }}>Connessione a locale...</Text>\n          <ActivityIndicator size=\"large\" />\n        </View>\n      )\n    }\n    return (\n      <ScrollView contentContainerStyle={{ paddingVertical: 10 }}>\n        {config.map(room => (\n          <View key={room.roomId} style={{ paddingVertical: 10, borderBottomColor: '#ccc', borderBottomWidth: 1, paddingHorizontal: 15 }}>\n            <Text style={{ fontSize: 19, fontWeight: '500', marginBottom: 5 }}>\n              {room.roomName}\n            </Text>\n            {room.devices.map(device => (\n              <View key={device.deviceId} style={{ paddingVertical: 5 }}>\n                <SmartSwitch\n                  value={db[device.deviceId].status}\n                  name={device.deviceName}\n                  id={device.deviceId}\n                  onValueChange={(val) => this.updateLight(device.deviceId, val)}\n                />\n              </View>\n            ))}\n          </View>\n        ))}\n      </ScrollView>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AppRegistry } from 'react-native';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nAppRegistry.registerComponent('App', () => App);\nAppRegistry.runApplication('App', { rootTag: document.getElementById('root') });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}